#!/usr/bin/env python

from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter
import datetime as dt
import serial
from enum import Enum
import sys
import math
import time
import datetime
from time import sleep
import typing as t

from lib.circular_buffer import CircularBuffer
from lib.reading import Reading


class Verbosity(Enum):
    NONE = 0
    VERBOSE = 1
    ALL = 2


verbosity: Verbosity = Verbosity.NONE


def log(level: Verbosity, msg: str):
    if verbosity >= level:
        print(msg, file=sys.stderr)


def get_now_ns() -> int:
    return time.clock_gettime_ns(time.CLOCK_REALTIME)


class Cmd:
    STOP = b"X"
    START = b"S"
    ACK = b"A"
    KAY = b"K"


class Receiver:
    ser: serial.Serial
    sample_count: int = 0

    offset_i: float
    offset_v: float
    i_calibration: float
    v_calibration: float

    cvv: float

    phase_shift: int

    adc_bits: int
    adc_counts: int

    def __init__(
        self,
        port_path: str,
        i_calibration: float,
        v_calibration: float,
        phase_shift: int,
        adc_bits: int = 10,
    ):
        self.adc_bits = adc_bits
        self.adc_counts = 1 << adc_bits

        self.phase_shift = phase_shift

        self.offset_i = float(self.adc_counts >> 1)
        self.offset_v = float(self.adc_counts >> 1)
        self.i_calibration = i_calibration
        self.v_calibration = v_calibration

        self.ser = serial.Serial(
            port=port_path,
            baudrate=115200,
            parity=serial.PARITY_NONE,
            stopbits=serial.STOPBITS_ONE,
            bytesize=serial.EIGHTBITS,
            timeout=1,
        )

    def __enter__(self):
        self._start_time = dt.datetime.now()
        self.vcc = self._handshake()

    def __exit__(self, exc_type, exc_value, traceback):
        duration = dt.datetime.now() - self._start_time
        if duration.seconds > 0 and verbosity:
            sample_rate = self.sample_count / duration.seconds
            log(
                Verbosity.VERBOSE, f"---\nCaptured {sample_rate} data points per second"
            )

        self.ser.write(Cmd.STOP)
        self.ser.read_all()

    def _handshake(self) -> float:
        self.ser.write(Cmd.STOP)
        sleep(1)
        self.ser.read_all()

        self.ser.write(Cmd.START)
        self.ser.read_until(Cmd.ACK)
        vcc = self._read_vcc()
        self.ser.write(Cmd.KAY)

        return vcc

    def _read_vcc(self) -> int:
        return int.from_bytes(self.ser.read(4), byteorder="little")

    def _read(self) -> int:
        current: int = int.from_bytes(self.ser.read(2), byteorder="little")
        self.sample_count += 1

        return current

    def stream_i_rms_with_count(
        self, n_samples: int, samples_per_second: float
    ) -> t.Iterable[Reading[float]]:
        """stream I RMS, with a given sample size"""
        return self.stream_i_rms_with_buffer(
            CircularBuffer(n_samples), samples_per_second
        )

    def stream_i_rms_with_duration(
        self, buffer_duration_s: float, samples_per_second: float
    ) -> t.Iterable[Reading[float]]:
        """stream I RMS, with a given buffer. Useful to set the RMS based on a given duration"""

        def sample_generator():
            start = get_now_ns()
            end = start + (buffer_duration_s * 1000 * 1000 * 1000)
            while end >= get_now_ns():
                # Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
                # then subtract this - signal is now centered on 0 counts.
                sample_i = float(self._read())
                self.offset_i = self.offset_i + (sample_i - self.offset_i) / 1024
                yield sample_i

        buff = list(sample_generator())

        return self.stream_i_rms_with_buffer(
            CircularBuffer.from_buffer(buff), samples_per_second
        )

    def stream_i_rms_with_buffer(
        self, squares_buff: CircularBuffer, samples_per_second: float
    ) -> t.Iterable[Reading[float]]:
        """stream I RMS, with a given buffer. Useful to set the sample size or prepopulated"""
        last_sample_time = get_now_ns()
        ns_per_sample = (1.0 / samples_per_second) * 1000 * 1000 * 1000

        while True:
            try:
                sample_i = float(self._read())
            except ValueError:
                log(Verbosity.NONE, "error reading, continuing...")
                continue

            # Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
            # then subtract this - signal is now centered on 0 counts.
            self.offset_i = self.offset_i + (sample_i - round(self.offset_i)) / 1024
            # Round the offset since the integer sample and
            # the floating point offset introduces error
            filtered_i = sample_i - self.offset_i

            # RMS
            sq_i: float = filtered_i * filtered_i
            squares_buff.append(sq_i)

            if squares_buff.full():
                i_ratio = self.i_calibration * ((self.vcc / 1024.0) / self.adc_counts)

                now = get_now_ns()
                time_difference_ns = now - last_sample_time

                if time_difference_ns >= ns_per_sample:
                    irms = i_ratio * math.sqrt(squares_buff.mean())
                    yield Reading(last_sample_time, now, irms)
                    # yield Reading(last_sample_time, now, filtered_i)
                    last_sample_time = get_now_ns()

    def calc_i_rms(self, n_samples: int) -> int:
        """Calculate I using RMS for a given number of samples"""
        sum_raw = 0
        sum_i = 0

        for _ in range(n_samples):
            try:
                sample_i = self._read()
            except ValueError:
                log(Verbosity.NONE, "error reading, continuing...")
                continue

            # Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
            # then subtract this - signal is now centered on 0 counts.
            self.offset_i = self.offset_i + (sample_i - self.offset_i) / 1024
            filtered_i = sample_i - self.offset_i

            # RMS
            sum_raw += filtered_i
            sq_i = filtered_i * filtered_i
            sum_i += sq_i

        i_ratio = self.i_calibration * ((self.vcc / 1000.0) / self.adc_counts)

        irms = i_ratio * math.sqrt(sum_i / n_samples)

        return irms


def arg_parser() -> ArgumentParser:
    parser = ArgumentParser(
        description="harmon-e (HARdware-MONitoring Energy). Read from an Arduino to stream high-resolution energy usage readings in Watt-Wiser compatible CSV format.",
        epilog="Part of the Watt Wise game jam in conjuction with Watt Wiser (https://wattwise.games)",
        formatter_class=ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "tty",
        help="Path to TTY connected to hardware. Usually /dev/ttyAMC* or /dev/ttyUSB*",
    )
    parser.add_argument(
        "-V",
        "--voltage",
        help="Expected voltage of measured wire",
        type=int,
        default=120,
    )
    parser.add_argument(
        "-r",
        "--ct-ratio",
        help="Ratio for the hardware's Current Transformer",
        type=int,
        default=1250,
    )
    parser.add_argument(
        "-R",
        "--resistance",
        help="Burden resistance for hardware circuit in olms",
        type=int,
        default=200,
    )
    parser.add_argument(
        "-b",
        "--adc-bits",
        help="Bits of precision in hardware Analog to Digital Converter",
        type=int,
        default=10,
    )
    parser.add_argument(
        "-v",
        "--verbose",
        help="Log verbose output to stderr",
        action="count",
        default=0,
    )
    tuning_group = parser.add_argument_group(
        title="Algorithm tuning",
        description="Arguments for tuning the IRMS algorithm for fidelity. You likely will not need to change these.",
    )
    tuning_group.add_argument(
        "--samples-per-second",
        help="Maximum samples per second",
        type=int,
        default=5000,
    )
    tuning_group.add_argument(
        "--buffer-duration",
        help="How many ms of data to store in reading-buffer",
        type=int,
        default=500,
    )
    return parser


def stream_monitor(
    tty: str,
    voltage: int,
    ct_ratio: int,
    resistance: int,
    adc_bits: int,
    samples_per_second: int,
    buffer_duration: int,
):
    # Current calibration is Rt (current transformer ratio, 2k) / Rb (burden resistor resistance)
    with Receiver(tty, ct_ratio / resistance, 120.0, 1.0) as receiver:
        log(Verbosity.ALL, f"Reading with VCC {receiver.vcc}")
        print(Reading.csv_header("apparent power", "W"))

        for i_rms in receiver.stream_i_rms_with_duration(
            buffer_duration / 1000, samples_per_second
        ):
            i_rms.value *= voltage
            print(i_rms)


if __name__ == "__main__":
    args = arg_parser().parse_args()
    verbosity = args.verbose
    stream_monitor(
        args.tty,
        args.voltage,
        args.ct_ratio,
        args.resistance,
        args.adc_bits,
        args.samples_per_second,
        args.buffer_duration,
    )
